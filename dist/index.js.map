{"version":3,"file":"index.js","sources":["../src/Pg.ts","../src/index.ts"],"sourcesContent":["import { Pool as DbPool } from \"pg\";\nimport { RDS } from \"aws-sdk\";\nimport type { Pool, QueryResult } from \"pg\";\nimport type { Config } from \"./types/Config\";\nimport type { TransactionQuery } from \"./types/Query\";\nconst { REGION, PGHOST, PGPORT, PGUSER, PGPASSWORD } = process.env;\nconst DBPOOL_MAXAGE = process.env[\"DBPOOL_MAXAGE\"] || 30000;\nconst WAIT_TIME = 50;\nconst log = (x: any) => {\n  if (process.env[\"PG_DEBUG\"] === \"true\" || process.env[\"PG_DEBUG\"]) {\n    console.log(x);\n  }\n};\nclass Pg {\n  private _config: Config = {\n    max: 10,\n    min: 0,\n    idleTimeoutMillis: 120000,\n    connectionTimeoutMillis: 10000,\n    region: \"us-east-1\",\n  };\n  private _pool: Pool = undefined as unknown as Pool;\n  private _poolStartTime: number = 0;\n  private _isPoolInitializing: boolean = false;\n  constructor(config: Config = {}) {\n    this._config = { ...this._config, ...config };\n  }\n  private async initPool() {\n    try {\n      this._isPoolInitializing = true;\n      if (!this._pool) {\n        //   get this right before instantiating. RDS password expires after certain time.\n        if (!PGPASSWORD && !this._config.password) {\n          log(\"Using RDS password\");\n          this._config.password = this.getRdsPassword();\n        }\n        log(\"Initializing pool wilth folowing\");\n        log(this._config);\n\n        this._pool = new DbPool(this._config);\n        this._pool.on(\"error\", (err) => {\n          console.error(\"Error on idle client.\");\n          console.error(err);\n          process.exit(1); //force lambda to use a new container.\n        });\n        this._poolStartTime = new Date().getTime(); //if connection timeout comes up, move this line to !pool block\n      } else if (!this.isPoolGood()) {\n        log(\"Pool object timed out. Re-Initializing new Pool.\");\n        try {\n          await this._pool.end();\n          this._pool = undefined as unknown as Pool;\n          await sleep(Math.floor(Math.random() * Math.floor(WAIT_TIME)));\n\n          await this.initPool();\n        } catch (e) {\n          //when parallel initPool is invoked and db connection is timed out, it will try to invoke pool.end() multile time. In this case, Wait for initPool to complete\n          throw \"WAIT\";\n        }\n      } else {\n        log(\"Reusing pool.\");\n      }\n    } catch (e) {\n      log(e);\n      if (e === \"WAIT\") {\n        throw \"WAIT\";\n      }\n      throw new Error(\n        JSON.stringify({ message: \"Error on connecting to DB\", error: e })\n      );\n    } finally {\n      this._isPoolInitializing = false;\n    }\n  }\n  public getPool() {\n    return this._pool;\n  }\n  public setConfig(configObj: Config = {}) {\n    try {\n      this._config = { ...this._config, ...configObj };\n      //   if not called before making connection, it will not close connection.\n      this._pool = undefined as unknown as Pool;\n      this.initPool();\n    } catch (e) {\n      console.log(e);\n    }\n  }\n  private isPoolGood() {\n    if (new Date().getTime() - this._poolStartTime > DBPOOL_MAXAGE) {\n      return false;\n    }\n    return true;\n  }\n  public async query(sql: any, valueFiled: any) {\n    try {\n      await this.validatePool();\n      return this._pool\n        .connect()\n        .then((client) => {\n          log(\"Client connected to pool.\");\n          const response = client.query(sql, valueFiled);\n          return response\n            .then((data) => {\n              return Promise.resolve(data);\n            })\n            .catch((queryError) => {\n              return Promise.reject(queryError);\n            })\n            .finally(() => {\n              log(\"Release client\");\n              client.release(true);\n            });\n        })\n        .catch(async (error) => {\n          await this._pool?.end();\n          this._pool = undefined as unknown as Pool;\n          throw error;\n        });\n    } catch (e) {\n      log(e);\n      return Promise.reject(e);\n    }\n  }\n\n  public async transaction(querries: TransactionQuery[] = []) {\n    this.checkDependent(querries);\n    try {\n      await this.validatePool();\n      const client = await this._pool.connect();\n      try {\n        log(\"BEGIN TRANSACTION\");\n        await client.query(\"BEGIN\");\n        let results: QueryResult[] = [];\n        for (let queryObj of querries) {\n          try {\n            let queryToExecute;\n            if (typeof queryObj === \"object\") {\n              const { dependsOn, updateQuery, ...query } = queryObj;\n              queryToExecute =\n                dependsOn && updateQuery\n                  ? updateQuery(queryObj, results[dependsOn])\n                  : query;\n            } else {\n              queryToExecute = queryObj;\n            }\n            log(\"Executing query\");\n            log(queryToExecute);\n            const dbResults: QueryResult = await client.query(queryToExecute);\n            results.push(dbResults);\n          } catch (e) {\n            throw e;\n          }\n        }\n        log(\"COMMIT TRANSACTION\");\n        await client.query(\"COMMIT\");\n        return results;\n      } catch (e) {\n        log(\"ROLLBACK TRANSACTION\");\n        await client.query(\"ROLLBACK\");\n        throw e;\n      } finally {\n        client.release(true);\n      }\n    } catch (e) {\n      throw e;\n    }\n  }\n  private async validatePool() {\n    try {\n      await this.initPool();\n    } catch (e) {\n      //there's a better way of handling this using catch chains.\n      if (e === \"WAIT\") {\n        log(\"waiting for pool to be intilized\");\n        this.waitForPool();\n      } else {\n        throw e;\n      }\n    }\n  }\n  private async waitForPool() {\n    if (!this._isPoolInitializing) {\n      return;\n    }\n    await sleep(Math.floor(Math.random() * Math.floor(WAIT_TIME)));\n    this.waitForPool();\n  }\n\n  private getRdsPassword() {\n    const signer = new RDS.Signer();\n    let token = signer.getAuthToken({\n      region: REGION || this._config.region,\n      hostname: PGHOST || this._config.host,\n      port: parseInt(PGPORT as string, 10) || this._config.port,\n      username: PGUSER || this._config.user,\n    });\n    return token;\n  }\n  private checkDependent(querries: any[]) {\n    for (let i = 0; i < querries.length; i++) {\n      if (typeof querries[i] === \"object\") {\n        const { dependsOn, updateQuery } = querries[i];\n        if (dependsOn !== undefined && dependsOn >= i) {\n          throw \"Cannot be self dependent or dependsOn need to be after the dependent query\";\n        }\n        if (dependsOn !== undefined && !updateQuery) {\n          console.warn(\"updateQuery callback was not provided with dependsOn.\");\n        }\n      }\n    }\n  }\n}\nfunction sleep(time: number) {\n  return new Promise((accept) => {\n    setTimeout(() => {\n      accept(true);\n    }, time);\n  });\n}\n\nexport default Pg;\n","import Pg from \"./Pg\";\nconst db = new Pg();\n//When this file is imported a pool is created by default providing a global pool for the lambda\nexport const query = db.query.bind(db);\nexport const trasaction = db.transaction.bind(db);\nexport const setConfig = db.setConfig.bind(db);\nexport const getPool = db.getPool.bind(db);\nexport default Pg;\n"],"names":["REGION","PGHOST","PGPORT","PGUSER","PGPASSWORD","process","env","DBPOOL_MAXAGE","WAIT_TIME","log","x","console","Pg","constructor","config","max","min","idleTimeoutMillis","connectionTimeoutMillis","region","undefined","_config","initPool","_isPoolInitializing","_pool","password","getRdsPassword","DbPool","on","err","error","exit","_poolStartTime","Date","getTime","isPoolGood","end","sleep","Math","floor","random","e","Error","JSON","stringify","message","getPool","setConfig","configObj","query","sql","valueFiled","validatePool","connect","then","client","response","data","Promise","resolve","catch","queryError","reject","finally","release","transaction","querries","checkDependent","results","queryObj","queryToExecute","dependsOn","updateQuery","dbResults","push","waitForPool","signer","RDS","Signer","token","getAuthToken","hostname","host","port","parseInt","username","user","i","length","warn","time","accept","setTimeout","db","bind","trasaction"],"mappings":"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"}